<?php

namespace app\modules\order\controllers;

use app\modules\order\models\InsertOrder;
use app\modules\order\models\Order;
use app\modules\order\models\OrderInfoInquiry;
use app\modules\order\models\search\OrderSearchModel;
use yii\data\ActiveDataProvider;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\rest\ActiveController;
use yii\web\NotFoundHttpException;
use yii\web\Response as webResponse;

class OrderController extends ActiveController
{

    public $modelClass = Order::class;

    public function behaviors(): array
    {
        $parent = parent::behaviors(); // TODO: Change the autogenerated stub

        $parent['corsFilter'] = [
            'class' => \yii\filters\Cors::class,
        ];

        $parent['contentNegotiator'] = [
            'class' => 'yii\filters\ContentNegotiator',
            'formats' => [ 'application/json' => webResponse::FORMAT_JSON ]
        ];

        $parent['authenticator'] = [
            'class' => CompositeAuth::class,
            'authMethods' => [
                HttpBearerAuth::class,
            ],
            'except' => []
        ];


        return $parent;
    }

    public function actions(): array
    {
        $actions = parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['create']);
        $actions['index']['prepareDataProvider'] = [$this, 'prepareDataProvider'];
        $actions['view']['findModel'] = [$this, 'oneDataProvider'];
        return $actions;
    }

    public function actionCreate() {
        $trans = \Yii::$app->db->beginTransaction();
        try {


            $model = new InsertOrder();
            $model->attributes  = \Yii::$app->request->post();
            $model->user_id = \Yii::$app->user->getId();
            $model->status = 1;


            if (!$model->validate()) {
                $trans->rollBack();
                \Yii::$app->response->statusCode = 422;
                \Yii::$app->response->statusText = 'Order: invalid request ';
                return $model->errors;
            }



            $inquiry = $model->getInquiry();
            $inquiry->status = 2;
            $inquiry->user_id = \Yii::$app->user->getId();
            if(!$inquiry->save()) {
                $trans->rollBack();
                \Yii::$app->response->statusCode = 422;
                \Yii::$app->response->statusText = 'Inquiry: invalid request ';
                return $inquiry->errors;
            }

            $model->total_premium = $model->priceInquiry();
            $model->tax =  $model->taxInquiry();
            $model->toll = $model->tollInquiry();

            if (!$model->save()) {
                $trans->rollBack();
                \Yii::$app->response->statusCode = 422;
                \Yii::$app->response->statusText = 'Order: invalid request ';
                return $model->errors;
            }

            $info = new OrderInfoInquiry();
            $info->order_id = $model->id_order;
            $info->user_id = $model->user_id;
            $info->insurance_line_id = $model->insurance_line_id;
            $info->insurance_line_category_id = $model->insurance_line_category_id;
            $info->inquiry_id = $model->inquiry_id;
            $info->detail_id = null;
            $info->status = 1;

            if (!$info->save()) {
                $trans->rollBack();
                \Yii::$app->response->statusCode = 422;
                \Yii::$app->response->statusText = 'Info: invalid request ';
                return $info->errors;
            }

            $trans->commit();
            return $info;

        } catch (\Exception $err) {
            $trans->rollBack();
            \Yii::$app->response->statusCode = 500;
            return $err->getMessage();
        }
    }

    public function oneDataProvider($id): Order
    {
        $model = Order::findOne([
            'id_order' => $id ,
            'user_id' => \Yii::$app->user->getId()
        ]);

        if (empty($model)) {
            throw new NotFoundHttpException('not found object');
        }

        return $model;

    }

    public function prepareDataProvider(): ActiveDataProvider
    {

        $model = new OrderSearchModel();
        $model->attributes = \Yii::$app->request->queryParams;
        $model->user_id = \Yii::$app->user->getId();
        return  $model->search();

    }

}