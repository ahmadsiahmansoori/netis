<?php

namespace app\modules\bodyPart\controllers;

use app\modules\bodyPart\models\BodyPartInquiry;
use app\modules\bodyPart\models\BodyPartInquiryAdditionalCov;
use app\modules\bodyPart\models\BodyPartInquiryDiscounts;
use app\modules\common\models\InsuranceCompanies;
use app\modules\Fanavaran\models\core\Auth;
use app\modules\Fanavaran\models\core\Conf;
use app\modules\Fanavaran\models\core\Curl;
use app\modules\thirdParty\models\search\ThirdPartyDetailSearchModel;
use app\modules\thirdParty\models\ThirdPartyDetail;
use TheSeer\Tokenizer\NamespaceUri;
use yii\data\ActiveDataProvider;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\rest\ActiveController;
use yii\web\HttpException;
use yii\web\NotFoundHttpException;
use yii\web\Response as webResponse;

class InquiryController extends ActiveController
{
    public $modelClass = BodyPartInquiry::class;



    public function behaviors(): array
    {
        $parent = parent::behaviors(); // TODO: Change the autogenerated stub

        $parent['corsFilter'] = [
            'class' => \yii\filters\Cors::class,
        ];

        $parent['contentNegotiator'] = [
            'class' => 'yii\filters\ContentNegotiator',
            'formats' => [ 'application/json' => webResponse::FORMAT_JSON ]
        ];

//        $parent['authenticator'] = [
//            'class' => CompositeAuth::class,
//            'authMethods' => [
//                HttpBearerAuth::class,
//            ],
//            'except' => []
//        ];


        return $parent;
    }

    public function actions(): array
    {
        $actions = parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['create']);
//        $actions['index']['prepareDataProvider'] = [$this, 'prepareDataProvider'];
        $actions['view']['findModel'] = [$this, 'oneDataProvider'];
        return $actions;
    }

    public function oneDataProvider($id): BodyPartInquiry
    {
        $model = BodyPartInquiry::findOne([
            'id' => $id ,
        ]);

        if (empty($model)) {
            throw new NotFoundHttpException('Object not found: ' . $id);
        }

        return $model;

    }


    public function actionCreate()
    {

        $req = \Yii::$app->request->post();

        try {
            $group = $req['vehicle_group']['value'];
            $used = $req['used']['value'];
            $system = $req['vehicle_system']['value'];
            $kind = $req['vehicle_kind']['value'];
            $fuel_type = $req['vehicle_fuel_type']['value'];
            $years = explode('-', $req['built_year']); # 1402 - 2020
            $built_year = trim($years[0]); # date pas shamsi
            $date_s = $built_year;
            $data_m = $years[1];
            $is_in_free_region = $req['is_in_free_region'];
            $free_region = null;
            $province = null;
            if ($is_in_free_region == 1) {
                $free_region = $req['free_region']['value'];
                $province = $req['province']['value'];
            }

            # check bimeh badaneh dard ya nadarad
            $has_previous_body_part = $req['has_body_party_insurance_history'];
            $previous_insurance_corp = 320;
            $previous_policy_begin_date = null;
            $previous_policy_end_date = null;

            if ($has_previous_body_part == 0) {
                # bimeh badaneh ghablan nadash default value migirah
                $basicLossHistoryId = 2;
                $additionalLossHistoryId = 2;
            } else if ($has_previous_body_part == 1) {
                $previous_insurance_corp = $req['previous_insurance_corp']['value'];
                $previous_policy_begin_date = $req['previous_policy_begin_date'];
                $previous_policy_end_date = $req['previous_policy_end_date'];
                $previous_discount = $req['previous_discount']['value'];
                $basicLossHistoryId = $previous_discount;
                $additionalLossHistoryId = $previous_discount;
            } else {
                throw new HttpException(422, 'invalid  has_body_party_insurance_history');
            }

            $is_new_car = $req['is_new_car'];
            $plaque_date = null;
            if ($is_new_car == 1) {
                $plaque_date = $req['plaque_date'];
            }


            $insurance_third_party_corp = $req['insurance_third_party_corp']['value'];
            $insurance_discount_third_party = null;
            if ($insurance_third_party_corp != 320) {
                $insurance_discount_third_party = $req['insurance_discount_third_party'];
            }


            $additional = $req['additional_covs'];
            $set_additional = [];
            if (is_array($additional) && count($additional) > 0) {
                for ($i = 0; $i < count($additional); $i++) {
                    $d = $additional[$i];
                    $set_additional[] = [
                        'CovKindId' => $d['value'],
                        'DmgEffectivePercent' => $d['dmg_effective_percent'],
                        'CovRateId' => null,
                        'DailyCommitmentAmount' => null
                    ];
                }
            }

            #TODO: discount , set for query calc inquiry

            #TODO: items not fabric vehicle set
            $amount_items_not_fabric = 0;
            $items_not_fabric = $req['list_non_fabric_detail'];
            if (is_array($items_not_fabric) && count($items_not_fabric) > 0) {
                for ($i = 0; $i < count($items_not_fabric); $i++) {
                    $x = $amount_items_not_fabric[$i];
                    $amount_items_not_fabric +=  $x['amount'];
                }
            }





            $vehicle_value = $req['vehicle_value'];
            $basic_cov = 3; # DEFAUL VALUE;
            $plaque_kind = 1; # default value;
            $driver_type = 335; # default value;


//                            'PlaqueSampleId' => null,


            $data = [
                "IsInFreeRegion" => $is_in_free_region,
                'FreeRegionId' => $free_region,
                "VehicleValue" => $vehicle_value,
                'VehicleKindId' => $kind,
                'PlaqueDate' => $plaque_date,
                'PreviousPolicyBeginDate' => $previous_policy_begin_date,
                'PreviousPolicyEndDate' => $previous_policy_end_date,
                'BasicCovId' => $basic_cov,
                'UsedId' => $used,
                'PlaqueKindId' => $plaque_kind,
                'BasicLossHistoryId' => $basicLossHistoryId,
                'AdditionalLossHistoryId' => $additionalLossHistoryId,
                'BuiltYear' => $date_s,
                'DriverTypeId' => $driver_type,
                'AdditionalCovs' => $set_additional,
                'Discounts' => []
            ];


            $data = json_encode($data);
            $insurance_corp = InsuranceCompanies::findOne(1);

            if (empty($insurance_corp)) {
                \Yii::$app->response->statusCode = 422;
                return ['message' => 'not found , insurance company', 'code' => 404];
            }

            $fan_res = BodyPartInquiry::fanCall($data);

            if ($fan_res['status_code'] != 200) {
                \Yii::$app->response->statusCode = 422;
                return ['errors' => $fan_res, 'message' => 'fail curl , checking request fan', 'code' => $fan_res['status_code']];
            }

            $content = $fan_res['content'];


            $i_discount = [];
            if (isset($content['Discounts'])) {
                $i_discount = $content['Discounts'];
                unset($content['Discounts']);

            }

            $i_additional = [];
            if (isset($content['AdditionalCovs'])) {
                $i_additional = $content['AdditionalCovs'];
                unset($content['AdditionalCovs']);
            }


            $content = Conf::mapPascalCaseToSnakeCase($content);

            $trans = \Yii::$app->db->beginTransaction();

            $model = new BodyPartInquiry();
            $model->attributes = $content;
            $model->user_id = \Yii::$app->user->getId();
            $model->fan_inquiry_id = $content['total_premium'];
            $model->vehicle_group_id = $group;
            $model->used_id = $used;
            $model->vehicle_system_id = $system;
            $model->built_year = $req['built_year'];
            $model->vehicle_kind_id = $kind;
            $model->vehicle_fuel_type_id = $fuel_type;
            $model->province_id = $province;
            $model->vehicle_non_fabric_value = $amount_items_not_fabric;
            $model->has_body_party_insurance_history = $has_previous_body_part;
            $model->previous_policy_begin_date = $previous_policy_begin_date;
            $model->previous_policy_end_date = $previous_policy_end_date;
            $model->previous_insurance_corp_id = $previous_insurance_corp;
            $model->is_new_car = $is_new_car;
            $model->insurance_third_party_corp_id = $insurance_third_party_corp;
            $model->insurance_discount_third_party = $insurance_discount_third_party;
            $model->status = 1;

            if (!$model->save()) {
                $trans->rollBack();
                \Yii::$app->response->statusCode = 422;
                return ['status' => false, 'message' => 'bad request , checking request', 'errors' => $model->errors];
            }

            if (count($i_additional) > 0) {
                for ($i = 0; $i < count($i_additional); $i++) {
                    $x = Conf::mapPascalCaseToSnakeCase($i_additional[$i]);
                    $additional_model = new BodyPartInquiryAdditionalCov();
                    $additional_model->attributes = $x;
                    $additional_model->body_part_inquiry_id = $model->id;
                    if (!$additional_model->save()) {
                        $trans->rollBack();
                        \Yii::$app->response->statusCode = 422;
                        return ['status' => false, 'message' => 'bad request , checking request', 'errors' => $model->errors];
                    }
                }
            }


            $trans->commit();

            return [
                "bodyPartyInsuranceList" => [
                    [

                        'id' => $model->id,
                        'fan_id' => $content['id'],
                        "name" => $insurance_corp->name,
                        'insurance_company_id' => $insurance_corp->id_insurance,
                        'insurance_line_id' => 4,
                        'insurance_line_category_id' => 4,
                        "icon" => $insurance_corp->path_logo_insurance,
                        "discountPercentage" => 0,
                        "discount" => 0,
                        "mainPrice" => 0,
                        "finalPrice" => $content['total_premium'],
                        "rate" => $insurance_corp->rate,
                        'options' => [],
                    ]
                ],
                "inquiryDetails" => \Yii::$app->request->post(),
                "totalCount" => 1
            ];



        } catch (\Exception $err) {
            \Yii::$app->response->statusCode = 500;
            return ['status' => false, 'message' => $err->getMessage(), 'errors' => ['errors detail' => [
                'file' => $err->getFile(),
                'line' => $err->getLine(),
            ]]];
        }


    }

}