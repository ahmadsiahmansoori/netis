<?php

namespace app\modules\bodyPart\models;

use app\modules\Fanavaran\models\core\Auth;
use app\modules\Fanavaran\models\core\Conf;
use app\modules\Fanavaran\models\core\Curl;
use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "body_part_inquiry".
 *
 * @property int $id
 * @property int|null $fan_inquiry_id
 * @property int|null $user_id
 * @property int|null $status
 * @property int|null $is_in_free_region
 * @property int|null $has_non_fabric
 * @property float|null $vehicle_non_fabric_value
 * @property int|null $has_third_party_insurance_history
 * @property string|null $insurance_discount_third_party
 * @property int|null $insurance_third_party_corp_id
 * @property int|null $free_region_id
 * @property int|null $province_id
 * @property int|null $driver_type_id
 * @property int|null $vehicle_kind_id
 * @property int|null $vehicle_group_id
 * @property int|null $vehicle_system_id
 * @property int|null $vehicle_fuel_type_id
 * @property int|null $used_id
 * @property int|null $plaque_kind_id
 * @property int|null $plaque_sample_id
 * @property string|null $built_year
 * @property int|null $request_km
 * @property float|null $vehicle_value
 * @property int|null $is_new_car
 * @property string|null $plaque_date
 * @property int|null $has_body_party_insurance_history
 * @property int|null $previous_insurance_corp_id
 * @property string|null $previous_policy_begin_date
 * @property string|null $previous_policy_end_date
 * @property int|null $basic_loss_history_id
 * @property int|null $additional_loss_history_id
 * @property int|null $basic_cov_id
 * @property float|null $transportation_prm
 * @property float|null $instealing_prm
 * @property float|null $glass_breaking_prm
 * @property float|null $flood_earthquake_prm
 * @property float|null $splash_painting_prm
 * @property float|null $note_ten_prm
 * @property float|null $accessory_basic_risk_prm
 * @property int|null $op_unit_id
 * @property float|null $toll
 * @property float|null $tax
 * @property float|null $total_premium
 * @property int|null $created_at
 * @property int|null $updated_at
 * @property int|null $delete_mode
 */
class BodyPartInquiry extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'body_part_inquiry';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['fan_inquiry_id', 'user_id', 'status', 'is_in_free_region', 'has_non_fabric', 'has_third_party_insurance_history', 'insurance_third_party_corp_id', 'free_region_id', 'province_id', 'driver_type_id', 'vehicle_kind_id', 'vehicle_group_id', 'vehicle_system_id', 'vehicle_fuel_type_id', 'used_id', 'plaque_kind_id', 'plaque_sample_id', 'request_km', 'is_new_car', 'has_body_party_insurance_history', 'previous_insurance_corp_id', 'basic_loss_history_id', 'additional_loss_history_id', 'basic_cov_id', 'op_unit_id', 'created_at', 'updated_at', 'delete_mode'], 'integer'],
            [['vehicle_non_fabric_value', 'vehicle_value', 'transportation_prm', 'instealing_prm', 'glass_breaking_prm', 'flood_earthquake_prm', 'splash_painting_prm', 'note_ten_prm', 'accessory_basic_risk_prm', 'toll', 'tax', 'total_premium'], 'number'],
            [['insurance_discount_third_party', 'built_year', 'plaque_date', 'previous_policy_begin_date', 'previous_policy_end_date'], 'string', 'max' => 255],
        ];
    }

    public function behaviors()
    {
        return [TimestampBehavior::class]; // TODO: Change the autogenerated stub
    }


    public static function fanCall($data): array
    {
        $auth = Auth::init();


        $headers = [
            'authenticationToken:' . $auth->getToken(),
            'CorpId: ' . Conf::CorpId,
            'ContractId: ' . Conf::ContractId,
            'Location: ' . Conf::Location,
        ];

        $res = Curl::httpRequest(Conf::URL_INQUIRY_BODY , $headers, Curl::POST , $data , true);

        if ($res['status_code'] == 200) {
            return  $res;
        }

        else if ($res['status_code'] != 200) {
            $auth->refreshToken();
        }


        $headers = [
            'authenticationToken:' . $auth->getToken(),
            'CorpId: ' . Conf::CorpId,
            'ContractId: ' . Conf::ContractId,
            'Location: ' . Conf::Location,
        ];

        return Curl::httpRequest(Conf::URL_INQUIRY_BODY , $headers, Curl::POST , $data , true);

    }



    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'fan_inquiry_id' => 'Fan Inquiry ID',
            'user_id' => 'User ID',
            'status' => 'Status',
            'is_in_free_region' => 'Is In Free Region',
            'has_non_fabric' => 'Has Non Fabric',
            'vehicle_non_fabric_value' => 'Vehicle Non Fabric Value',
            'has_third_party_insurance_history' => 'Has Third Party Insurance History',
            'insurance_discount_third_party' => 'Insurance Discount Third Party',
            'insurance_third_party_corp_id' => 'Insurance Third Party Corp ID',
            'free_region_id' => 'Free Region ID',
            'province_id' => 'Province ID',
            'driver_type_id' => 'Driver Type ID',
            'vehicle_kind_id' => 'Vehicle Kind ID',
            'vehicle_group_id' => 'Vehicle Group ID',
            'vehicle_system_id' => 'Vehicle System ID',
            'vehicle_fuel_type_id' => 'Vehicle Fuel Type ID',
            'used_id' => 'Used ID',
            'plaque_kind_id' => 'Plaque Kind ID',
            'plaque_sample_id' => 'Plaque Sample ID',
            'built_year' => 'Built Year',
            'request_km' => 'Request Km',
            'vehicle_value' => 'Vehicle Value',
            'is_new_car' => 'Is New Car',
            'plaque_date' => 'Plaque Date',
            'has_body_party_insurance_history' => 'Has Body Party Insurance History',
            'previous_insurance_corp_id' => 'Previous Insurance Corp ID',
            'previous_policy_begin_date' => 'Previous Policy Begin Date',
            'previous_policy_end_date' => 'Previous Policy End Date',
            'basic_loss_history_id' => 'Basic Loss History ID',
            'additional_loss_history_id' => 'Additional Loss History ID',
            'basic_cov_id' => 'Basic Cov ID',
            'transportation_prm' => 'Transportation Prm',
            'instealing_prm' => 'Instealing Prm',
            'glass_breaking_prm' => 'Glass Breaking Prm',
            'flood_earthquake_prm' => 'Flood Earthquake Prm',
            'splash_painting_prm' => 'Splash Painting Prm',
            'note_ten_prm' => 'Note Ten Prm',
            'accessory_basic_risk_prm' => 'Accessory Basic Risk Prm',
            'op_unit_id' => 'Op Unit ID',
            'toll' => 'Toll',
            'tax' => 'Tax',
            'total_premium' => 'Total Premium',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'delete_mode' => 'Delete Mode',
        ];
    }
}
