<?php

namespace app\modules\thirdParty\models\search\query;

use app\modules\thirdParty\models\ThirdPartyDetail;
use app\modules\thirdParty\models\ThirdPartyDetailDriver;
use yii\base\Model;

class ThirdPartyDetailQuery extends Model
{

    public $id = null;
    public $user_id;
    public $third_party_inquiry_id;
    public $path_file_img_front_cart_vehicle;
    public $path_file_img_back_cart_vehicle;
    public $plaque_double_digit;
    public $plaque_triple_digit;
    public $plaque_iran_digit;
    public $plaque_letter;
    public $vehicle_motor_no;
    public $vehicle_chassis_no;
    public $vehicle_vin;

    public $owner_status_vehicle;
    public $owner_vehicle_melli_code;
    public $owner_vehicle_hbd_date;
    public $owner_vehicle_gender;
    public $other_owner_vehicle_full_name;
    public $other_owner_vehicle_user_hbd_date;
    public $other_owner_vehicle_user_code;
    public $owner_has_vehicle_insurance_body;
    public $mention_insurance_status_owner;
    public $relativity_to_person_transfer;
    public $mention_insurance_call_number;
    public $mention_insurance_province;
    public $mention_insurance_city;
    public $mention_insurance_address;
    public $mention_insurance_code_post;
    public $other_mention_insurance_user_melli_code;
    public $other_mention_insurance_user_hbd_date;
    public $other_mention_insurance_user_gender;

    public $email;
    public $description;


    public $drivers;
    private $message = '';


    private const owner_status_vehicle = [1, 2];
    private const mention_insurance_status_owner = [1, 2];

    # 0 woman , 1 man
    private const gender = [0, 1];


    public function rules(): array
    {
        return [
            [[
                'path_file_img_front_cart_vehicle',
                'path_file_img_back_cart_vehicle',
                'plaque_double_digit',
                'plaque_triple_digit',
                'plaque_iran_digit',
                'plaque_letter',
                'vehicle_motor_no',
                'vehicle_chassis_no',
                'vehicle_vin',
                'owner_status_vehicle',
                'mention_insurance_status_owner',
                'relativity_to_person_transfer',
                'mention_insurance_call_number',
                'third_party_inquiry_id',
                "mention_insurance_address",
                'user_id',
            ], 'required'],

            [[
                'owner_has_vehicle_insurance_body',
                'owner_status_vehicle',
                'plaque_triple_digit',
                'plaque_double_digit',
                'plaque_iran_digit',
                'owner_vehicle_gender',
                'mention_insurance_status_owner',

                'other_mention_insurance_user_gender',
                'third_party_inquiry_id',
                'user_id',

            ], 'integer'],
            [[
                'path_file_img_front_cart_vehicle',
                'path_file_img_back_cart_vehicle',
                'owner_vehicle_melli_code',
                'owner_vehicle_hbd_date',
                'other_owner_vehicle_full_name',
                'other_owner_vehicle_user_code',
                'other_owner_vehicle_user_hbd_date',
                'other_mention_insurance_user_hbd_date',
                'email',
                'description',
                "mention_insurance_address",
                "mention_insurance_code_post",
                'vehicle_motor_no',
                'vehicle_chassis_no',
                'vehicle_vin',
                'mention_insurance_call_number',
                'other_mention_insurance_user_melli_code',

            ], 'string'],
            [[
                'plaque_letter',
                'relativity_to_person_transfer',
                'mention_insurance_province',
                'mention_insurance_city',
                'drivers'
            ], 'safe'],
            ['owner_status_vehicle', 'checkOwnerStatusVehicle'],
            ['mention_insurance_status_owner', 'checkMentionInsuranceStatusOwner']
        ]; // TODO: Change the autogenerated stub
    }


    public function checkOwnerStatusVehicle($attribute, $params = [])
    {

        if (!in_array($this->owner_status_vehicle, self::owner_status_vehicle)) {
            $this->addError($attribute, 'invalid Owner Status Vehicle. values: [1 , 2]');
        }

        if ($this->owner_status_vehicle == 1) {
            if (
                empty($this->owner_vehicle_melli_code) ||
                empty($this->owner_vehicle_hbd_date) ||
                empty($this->owner_vehicle_gender)
            ) {
                $this->addError($attribute, 'property  Owner  Vehicle empty');
            }
        } else if ($this->owner_status_vehicle == 2) {
            if (
                empty($this->other_owner_vehicle_full_name) ||
                empty($this->other_owner_vehicle_user_code) ||
                empty($this->other_owner_vehicle_user_hbd_date)
            ) {
                $this->addError($attribute, 'property  Other Owner  Vehicle empty');
            }
        }
    }

    public function checkMentionInsuranceStatusOwner($attribute, $params)
    {
        if (!in_array($this->mention_insurance_status_owner, self::mention_insurance_status_owner)) {
            $this->addError($attribute, 'invalid mention insurance Status owner. values: [1 , 2]');
        }

        if ($this->mention_insurance_status_owner == 2) {
            if (
                !empty($this->other_mention_insurance_user_melli_code) ||
                !empty($this->other_mention_insurance_user_hbd_date) ||
                !empty($this->other_mention_insurance_user_gender)
            ) {
                $this->addError($attribute, 'Empty Property , check values ...');
            }
        }


    }


    public function save(): bool
    {
        if ($this->validate()) {
            try {
                $model = new ThirdPartyDetail();
                $model->attributes = $this->attributes;
                $model->plaque_letter_id = $this->plaque_letter['value'];
                $model->relativity_to_person_transfer_id = $this->relativity_to_person_transfer['value'];
                $model->mention_insurance_province_id = $this->mention_insurance_province['value'];
                $model->mention_insurance_city_id = $this->mention_insurance_city['value'];
                $model->status = 1; #default
                $model->third_party_inquiry_id = $this->third_party_inquiry_id;
                if (!$model->save()) {
                    $this->message = '001: fail request';
                    return false;
                }
                $this->id = $model->id;
                $drivers = $this->drivers;
                if (is_array($drivers) && count($drivers) > 0) {
                    for ($i = 0; $i < count($drivers); $i++) {
                        $driver = new ThirdPartyDetailDriver();
                        $driver->attributes = $drivers[$i];
                        $driver->third_party_detail_id = $model->id;
                        if (!$driver->save()) {
                            $this->message = '004: fail request';
                            return  false;
                        }
                    }
                }
                $this->message = 'ok';
                return true;
            } catch (\Exception $err) {
                $this->message = '002: Line: ' . $err->getLine() . $err->getMessage();
                return false;
            }
        }
        $this->message = '003: fail request';
        return false;
    }


    public function message(): string
    {
        return $this->message;
    }


}